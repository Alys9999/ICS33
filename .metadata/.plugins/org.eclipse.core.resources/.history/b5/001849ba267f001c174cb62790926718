import prompt

class Sparse_Matrix:

    # I have written str(...) because it is used in the bsc.txt file and
    #   it is a bit subtle to get correct. This function does not depend
    #   on any other method in this class being written correctly, although
    #   it could be simplified by writing self[...] which calls __getitem__.   
    def __str__(self):
        size = str(self.rows)+'x'+str(self.cols)
        width = max(len(str(self.matrix.get((r,c),0))) for c in range(self.cols) for r in range(self.rows))
        return size+':['+('\n'+(2+len(size))*' ').join ('  '.join('{num: >{width}}'.format(num=self.matrix.get((r,c),0),width=width) for c in range(self.cols))\
                                                                                             for r in range(self.rows))+']'
                                                    
                                                    
                                                    
    def __init__(self, rows, cols, *matrix):
        if type(rows) not in [int] or type(cols) not in [int] or rows<=0 or cols<=0:
            raise AssertionError('invalid rows or columns')
        for x in [*matrix]:
            if len(x)!= 3 or type(x[0]) not in [int] or type(x[1]) not in [int] or x[0]>=rows or x[1]>=cols or type(x[2]) not in[int,float]:
                raise AssertionError('invalid index') 
        key_list=[(x[0],x[1]) for x in [*matrix]]
        if len(key_list)!=len(set(key_list)):
            raise AssertionError('repeated index')
        self.rows=rows
        self.cols=cols
        self.matrix=dict(((x[0],x[1]),x[2]) for x in [*matrix] if x[2]!=0)
        
    
    def size(self):
        return (self.rows,self.cols)
    
    def __len__(self):
        return self.rows*self.cols
    
    def __bool__(self):
        if len(self.matrix.keys())!=0:
            return True
        else:
            return False
    
    def __repr__(self):
        l1=list((str((str(x[0][0])+','+str(x[0][1]))+','+str(x[1])),) for x in self.matrix.items() if len(self.matrix.items())!=0)
        i=''.join(i for i in l1)
        return 'Sparse_Matrix('+i+')'
    
    

if __name__ == '__main__':
    
    #Simple tests before running driver
    #Put your own test code here to test Sparse_Matrix before doing the bsc tests
    #Debugging problems with these tests is simpler

    print('Printing')
    m = Sparse_Matrix(3,3, (0,0,1),(1,1,3),(2,2,1))
    print(m.__repr__())
    '''
    print(m)
    print(repr(m))
    print(m.details())
  
    print('\nlen and size')
    print(len(m), m.size(),)
    
    print('\ngetitem and setitem')
    print(m[1,1])
    m[1,1] = 0
    m[0,1] = 2
    print(m.details())

    print('\niterator')
    for r,c,v in m:
        print((r,c),v)
    
    print('\nm, m+m, m+1, m==m, m==1')
    print(m)
    print(m+m)
    print(m+1)
    print(m==m)
    print(m==1)
    print()
    '''
    import driver
    driver.default_file_name = 'bscp22W22.txt'
#     driver.default_show_exception = prompt.for_bool('Show exceptions when testing',True)
#     driver.default_show_exception_message = prompt.for_bool('Show exception messages when testing',True)
#     driver.default_show_traceback = prompt.for_bool('Show traceback when testing',True)
    driver.driver()
