# A Black_Hole is derived from a Simulton base; it updates by finding+removing
#   any objects (derived from a Prey base) whose center is crosses inside its
#   radius (and returns a set of all eaten simultons); it displays as a black
#   circle with a radius of 10 (e.g., a width/height 20).
# Calling get_dimension for the width/height (for containment and displaying)'
#   will facilitate inheritance in Pulsator and Hunter

from simulton import Simulton
from prey import Prey


class Black_Hole(Simulton):  
    radius = 10
    def __init__(self,x,y,angle,speed,color,width,height):
        Prey.__init__(self,x,y,width,height,angle,speed)
        self._x       = x
        self._y       = y
        self._speed   = speed
        self._angle   = angle
        self._color   = color
        
    def update(self,model):
        self.move()
        self.wall_bounce()
        
    def display(self,canvas):
       canvas.create_oval(self._x-Black_Hole.radius      , self._y-Black_Hole.radius,
                                self._x+Black_Hole.radius, self._y+Black_Hole.radius,
                                fill=self._color)


