# Setup
c-->from imp import reload
c-->import exam
c-->reload(exam)
c-->from exam import prev_n, deepest, check_dict
c-->from ile3helper import ints, primes, hide, nth, nth_for_m, is_prime
c-->from inspect import isgeneratorfunction, isgenerator

# Test prev_n: 3 finite, 3 infinite
e-->all([isgeneratorfunction(prev_n), isgenerator(prev_n('',3,lambda x : x))])-->True
e-->list(prev_n('a.bcde.f.g.hijk',2,lambda x:x=='.'))-->[['a', '.'], ['e', '.'], ['f', '.'], ['g', '.']]
e-->list(prev_n(hide('ab.defghi.klmn.pqrst.vwz.z'),5,lambda x : x=='.'))-->[['a', 'b', '.'], ['f', 'g', 'h', 'i', '.'], ['k', 'l', 'm', 'n', '.'], ['q', 'r', 's', 't', '.'], ['.', 'v', 'w', 'z', '.']]
e-->list(prev_n(hide([1,2,3,4,5,6,7,8,9]),3,lambda x : x%2==1))-->[[1], [1, 2, 3], [3, 4, 5], [5, 6, 7], [7, 8, 9]]
e-->nth(prev_n(ints(),5,is_prime),10)-->[25, 26, 27, 28, 29]
e-->nth_for_m(prev_n(ints(),5,is_prime),200,3)-->[[1219, 1220, 1221, 1222, 1223], [1225, 1226, 1227, 1228, 1229], [1227, 1228, 1229, 1230, 1231]]
e-->nth_for_m(prev_n(ints(),5,lambda x : is_prime(x) and x%100==13),10,3)-->[[2209, 2210, 2211, 2212, 2213], [2709, 2710, 2711, 2712, 2713], [3309, 3310, 3311, 3312, 3313]]

# Test deepest
e-->deepest([1])-->1
e-->deepest([[1]])-->2
e-->deepest([[1,2,[9,8],[1,3,2]],[1,1]])-->3
e-->deepest([[1,2,[9,[7],8],[1,3,2]],[1,1]])-->4
e-->deepest([[1,2,[9,8],[1,[[7]],3,2]],[1,1]])-->5


# Test check_dict
c-->d = check_dict(lambda x : type(x) is str, lambda x : type(x) is int and x >= 0)
c-->d['a'] = 1       # legal key and value
c-->d[2] = 2         # illegal key
c-->d['z'] = -1      # illegal value
c-->d[2] = 2.5       # illegal key and value
==-->d-->{'a': 1}
==-->d['a']-->1
^-->d[2]-->KeyError
==-->d(2)-->2.5
==-->d('z')-->-1
^-->d(5)-->KeyError
==-->[kv for kv in d.iter_errors()]-->[(2, [2, 2.5]), ('z', [-1])]

# Test check_dict: extra credit
c-->d2 = check_dict(lambda x : type(x) is str, lambda x : type(x) is int and x >= 0, [('a',1),(2,2)],b=2,c=-3)
==-->d2-->{'a': 1, 'b': 2}
==-->[kv for kv in d2.iter_errors()]-->[(2, [2]), ('c', [-3])]
c-->d2 = check_dict(lambda x : type(x) is str, lambda x : type(x) is int and x >= 0, {'a':1,2:2},b=2,c=-3)
==-->d2-->{'a': 1, 'b': 2}
==-->[kv for kv in d2.iter_errors()]-->[(2, [2]), ('c', [-3])]